---
alwaysApply: false
---
# Playwright MCP v2: Real-Time Browser Control Rule

## Overview
This rule governs the correct usage of Playwright Model Context Protocol (MCP) server for real-time browser automation and testing. **Critical**: Playwright MCP provides direct browser control through 31 discrete tools, NOT code generation. AI agents interact with live browser instances through MCP protocol calls.

## Core Architecture Understanding

### How Playwright MCP Actually Works
- **NOT a code generator**: AI agents do not generate `.spec.ts` files
- **Real-time browser control**: AI agents directly manipulate live browser instances
- **MCP protocol communication**: Tools execute immediately in browser context
- **Accessibility-first**: Uses structured snapshots, not screenshots or CSS selectors
- **Immediate execution**: Actions happen instantly, results returned synchronously

### Current Rule File Issues (v1)
- Misrepresents MCP as code generation tool
- Shows incorrect usage patterns (`page.goto('/')` instead of `browser_navigate`)
- Assumes manual test execution workflow
- Lacks understanding of 31 available tools

## MCP Server Configuration

### Basic Setup
```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"]
    }
  }
}
```

### Advanced Configuration for Local Development
```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": [
        "@playwright/mcp@latest",
        "--port", "8931",
        "--headless", "false",
        "--timeout-action", "10000"
      ]
    }
  }
}
```

## Complete Tool Inventory (31 Tools)

### Core Automation Tools (21 Tools)

#### Navigation & Page Control
1. **`browser_navigate`** - Navigate to URL
   - **Purpose**: Direct browser navigation to any URL
   - **Parameters**: `url` (string)
   - **Usage**: `browser_navigate("http://localhost:5173")` for local development
   - **Key**: Use for initial page loads and route changes

2. **`browser_navigate_back`** - Go back in history
   - **Purpose**: Browser back button simulation
   - **Parameters**: None
   - **Usage**: Simulate user navigation patterns

3. **`browser_resize`** - Resize browser window
   - **Purpose**: Test responsive design across viewports
   - **Parameters**: `width`, `height` (numbers)
   - **Usage**: `browser_resize(390, 844)` for mobile testing

4. **`browser_close`** - Close browser/page
   - **Purpose**: Clean up browser sessions
   - **Parameters**: None
   - **Usage**: End test sessions properly

#### Element Interaction (6 Tools)
5. **`browser_click`** - Click elements
   - **Purpose**: Primary interaction method using accessibility references
   - **Parameters**: `element` (description), `ref` (accessibility reference), `doubleClick`, `button`, `modifiers`
   - **Usage**: `browser_click("Submit button", "ref_123")` - always prefer over CSS selectors

6. **`browser_type`** - Type text into inputs
   - **Purpose**: Text input with optional slow typing simulation
   - **Parameters**: `element`, `ref`, `text`, `submit`, `slowly`
   - **Usage**: `browser_type("Email field", "ref_456", "user@test.com", false, true)` for slow typing

7. **`browser_fill_form`** - Fill multiple form fields
   - **Purpose**: Batch form field population
   - **Parameters**: `fields` (array of field objects)
   - **Usage**: Single operation for complex forms instead of multiple `browser_type` calls

8. **`browser_select_option`** - Select dropdown options
   - **Purpose**: Dropdown and select element interaction
   - **Parameters**: `element`, `ref`, `values` (array)
   - **Usage**: `browser_select_option("Country dropdown", "ref_789", ["United States"])`

9. **`browser_hover`** - Mouse hover
   - **Purpose**: Hover interactions for tooltips, menus
   - **Parameters**: `element`, `ref`
   - **Usage**: Reveal hidden elements or trigger hover effects

10. **`browser_drag`** - Drag and drop
    - **Purpose**: Drag operations between elements
    - **Parameters**: `startElement`, `startRef`, `endElement`, `endRef`
    - **Usage**: File uploads, sortable lists, drag-and-drop interfaces

#### Input & Keyboard
11. **`browser_press_key`** - Keyboard input
    - **Purpose**: Special key presses (Enter, Tab, Arrow keys)
    - **Parameters**: `key` (string)
    - **Usage**: `browser_press_key("Enter")` for form submission

12. **`browser_file_upload`** - File uploads
    - **Purpose**: Handle file input elements
    - **Parameters**: `paths` (array of file paths)
    - **Usage**: `browser_file_upload(["/path/to/file.jpg"])` for upload testing

#### JavaScript & Evaluation
13. **`browser_evaluate`** - Execute JavaScript
    - **Purpose**: Run custom JavaScript in browser context
    - **Parameters**: `function` (JS code), `element`, `ref` (optional)
    - **Usage**: `browser_evaluate("return document.title")` for dynamic data extraction

#### Dialogs & Alerts
14. **`browser_handle_dialog`** - Handle browser dialogs
    - **Purpose**: Accept/dismiss alerts, confirms, prompts
    - **Parameters**: `accept` (boolean), `promptText` (optional)
    - **Usage**: `browser_handle_dialog(true)` to accept alerts

#### Waiting & Synchronization
15. **`browser_wait_for`** - Wait for conditions
    - **Purpose**: Wait for text appearance/disappearance or time delays
    - **Parameters**: `time`, `text`, `textGone`
    - **Usage**: `browser_wait_for(5, "Loading complete")` for synchronization

### Information Gathering Tools (4 Tools)

16. **`browser_snapshot`** - Accessibility snapshot
    - **Purpose**: Capture structured page accessibility tree (PRIMARY method)
    - **Parameters**: None
    - **Usage**: Always call first to get element references for other operations
    - **Key**: Provides `ref` values needed for all element interactions

17. **`browser_take_screenshot`** - Visual screenshots
    - **Purpose**: Visual page/element capture
    - **Parameters**: `type`, `filename`, `element`, `ref`, `fullPage`
    - **Usage**: `browser_take_screenshot("png", "debug.png", null, null, true)` for full page

18. **`browser_console_messages`** - Get console logs
    - **Purpose**: Retrieve browser console output
    - **Parameters**: None
    - **Usage**: Debug JavaScript errors and warnings

19. **`browser_network_requests`** - Network inspection
    - **Purpose**: View network requests and responses
    - **Parameters**: None
    - **Usage**: API call verification and debugging

### Tab Management (1 Tool)

20. **`browser_tabs`** - Tab operations
    - **Purpose**: List, create, close, switch browser tabs
    - **Parameters**: `action`, `index` (optional)
    - **Usage**: `browser_tabs("list")` to see open tabs, `browser_tabs("switch", 1)` to switch

### Browser Installation (1 Tool)

21. **`browser_install`** - Install browsers
    - **Purpose**: Automatic browser binary installation
    - **Parameters**: None
    - **Usage**: Call when getting "browser not installed" errors

### Advanced Tools (9 Tools - Opt-in Capabilities)

#### Vision-Based Interactions (3 Tools)
22. **`browser_mouse_click_xy`** - Coordinate clicking
    - **Purpose**: Click at specific coordinates (requires `--caps=vision`)
    - **Parameters**: `element`, `x`, `y`

23. **`browser_mouse_move_xy`** - Mouse movement
    - **Purpose**: Move mouse to coordinates (requires `--caps=vision`)
    - **Parameters**: `element`, `x`, `y`

24. **`browser_mouse_drag_xy`** - Coordinate dragging
    - **Purpose**: Drag from coordinate to coordinate (requires `--caps=vision`)
    - **Parameters**: `element`, `startX`, `startY`, `endX`, `endY`

#### PDF Generation (1 Tool)
25. **`browser_pdf_save`** - Save as PDF
    - **Purpose**: Export page as PDF (requires `--caps=pdf`)
    - **Parameters**: `filename`

#### Verification Tools (4 Tools - requires `--caps=verify`)
26. **`browser_verify_element_visible`** - Element visibility
    - **Purpose**: Verify element presence using accessibility attributes
    - **Parameters**: `role`, `accessibleName`

27. **`browser_verify_text_visible`** - Text visibility
    - **Purpose**: Verify text content is visible
    - **Parameters**: `text`

28. **`browser_verify_list_visible`** - List verification
    - **Purpose**: Verify list elements are present
    - **Parameters**: `element`, `ref`, `items`

29. **`browser_verify_value`** - Value verification
    - **Purpose**: Verify form element values
    - **Parameters**: `type`, `element`, `ref`, `value`

#### Tracing Tools (2 Tools - requires `--caps=tracing`)
30. **`browser_start_tracing`** - Start performance tracing
    - **Purpose**: Begin recording performance traces

31. **`browser_stop_tracing`** - Stop performance tracing
    - **Purpose**: End recording and save trace data

## Correct AI Agent Workflow

### Standard Interaction Pattern
1. **Navigate**: `browser_navigate("http://localhost:5173")`
2. **Snapshot**: `browser_snapshot()` - Always get accessibility tree first
3. **Analyze**: AI examines snapshot to identify target elements
4. **Interact**: Use element `ref` values for precise interactions
5. **Verify**: Use verification tools or `browser_evaluate()` for confirmation
6. **Debug**: Use console/network tools if issues arise

### Local Development Specifics
- **Hot Reload**: Changes appear immediately - no need to restart
- **Localhost URLs**: Always use `http://localhost:5173` for development
- **Live Debugging**: Use `browser_console_messages()` and `browser_network_requests()` for real-time debugging
- **Accessibility First**: Rely on `browser_snapshot()` for element discovery, not visual inspection

## Best Practices for MCP Usage

### Element Discovery (Critical)
```javascript
// WRONG - Don't use CSS selectors
browser_click("#submit-button")

// CORRECT - Use accessibility references
const snapshot = browser_snapshot()
// AI analyzes snapshot, finds: "- button \"Submit\" ref_123"
browser_click("Submit button", "ref_123")
```

### Form Handling
```javascript
// Batch form filling is preferred
browser_fill_form([
  { element: "Name field", ref: "ref_1", value: "John Doe" },
  { element: "Email field", ref: "ref_2", value: "john@example.com" }
])
```

### Verification Patterns
```javascript
// Use verification tools for assertions
browser_verify_text_visible("Registration successful")
browser_verify_element_visible("button", "Logout")
```

## Common Mistakes to Avoid

### Architecture Misunderstandings
- **Don't generate code**: MCP doesn't create `.spec.ts` files
- **Don't use CSS selectors**: Always use accessibility refs from snapshots
- **Don't assume screenshots**: Use `browser_snapshot()` for element discovery

### Workflow Errors
- **Don't interact without snapshot**: Always call `browser_snapshot()` first
- **Don't use coordinates by default**: Only with `--caps=vision` enabled
- **Don't forget verification**: Use verification tools for assertions

## Troubleshooting Guide

### Connection Issues
- **Server not found**: Ensure MCP server is running with correct port
- **Tool not available**: Check if capability is enabled (e.g., `--caps=vision`)

### Element Interaction Failures
- **"Element not found"**: Call `browser_snapshot()` again - DOM may have changed
- **Wrong element clicked**: Verify `ref` values from latest snapshot
- **Timing issues**: Use `browser_wait_for()` before interactions

### Local Development Specific
- **Changes not visible**: Ensure Vite dev server is running on port 5173
- **Hot reload not working**: Check browser console for errors
- **Network requests failing**: Use `browser_network_requests()` to debug

## Integration with Development Workflow

### Development Testing
1. Start Vite dev server: `npm run dev`
2. Launch MCP server: `npx @playwright/mcp@latest --port 8931`
3. AI agents can now navigate `http://localhost:5173` and see live changes

### CI/CD Integration
- Use headless mode: `--headless true`
- Set appropriate timeouts: `--timeout-action 10000`
- Enable only needed capabilities to reduce overhead

### Debugging Workflow
1. Navigate to problematic page
2. Take snapshot to see current state
3. Check console messages for errors
4. Inspect network requests for failed API calls
5. Use verification tools to confirm expected state

## Performance Considerations

### Efficiency Tips
- Call `browser_snapshot()` strategically - don't spam it
- Use batch operations like `browser_fill_form()` when possible
- Enable only necessary capabilities (`--caps`) to reduce overhead
- Use `browser_wait_for()` instead of arbitrary delays

### Resource Management
- Close browsers when done: `browser_close()`
- Use appropriate timeouts to avoid hanging
- Monitor console for performance warnings

This rule provides the accurate foundation for Playwright MCP usage, correcting the fundamental misconceptions in the original rule file and enabling proper real-time browser automation capabilities.
# Playwright MCP v2: Real-Time Browser Control Rule

## Overview
This rule governs the correct usage of Playwright Model Context Protocol (MCP) server for real-time browser automation and testing. **Critical**: Playwright MCP provides direct browser control through 31 discrete tools, NOT code generation. AI agents interact with live browser instances through MCP protocol calls.

## Core Architecture Understanding

### How Playwright MCP Actually Works
- **NOT a code generator**: AI agents do not generate `.spec.ts` files
- **Real-time browser control**: AI agents directly manipulate live browser instances
- **MCP protocol communication**: Tools execute immediately in browser context
- **Accessibility-first**: Uses structured snapshots, not screenshots or CSS selectors
- **Immediate execution**: Actions happen instantly, results returned synchronously

### Current Rule File Issues (v1)
- Misrepresents MCP as code generation tool
- Shows incorrect usage patterns (`page.goto('/')` instead of `browser_navigate`)
- Assumes manual test execution workflow
- Lacks understanding of 31 available tools

## MCP Server Configuration

### Basic Setup
```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"]
    }
  }
}
```

### Advanced Configuration for Local Development
```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": [
        "@playwright/mcp@latest",
        "--port", "8931",
        "--headless", "false",
        "--timeout-action", "10000"
      ]
    }
  }
}
```

## Complete Tool Inventory (31 Tools)

### Core Automation Tools (21 Tools)

#### Navigation & Page Control
1. **`browser_navigate`** - Navigate to URL
   - **Purpose**: Direct browser navigation to any URL
   - **Parameters**: `url` (string)
   - **Usage**: `browser_navigate("http://localhost:5173")` for local development
   - **Key**: Use for initial page loads and route changes

2. **`browser_navigate_back`** - Go back in history
   - **Purpose**: Browser back button simulation
   - **Parameters**: None
   - **Usage**: Simulate user navigation patterns

3. **`browser_resize`** - Resize browser window
   - **Purpose**: Test responsive design across viewports
   - **Parameters**: `width`, `height` (numbers)
   - **Usage**: `browser_resize(390, 844)` for mobile testing

4. **`browser_close`** - Close browser/page
   - **Purpose**: Clean up browser sessions
   - **Parameters**: None
   - **Usage**: End test sessions properly

#### Element Interaction (6 Tools)
5. **`browser_click`** - Click elements
   - **Purpose**: Primary interaction method using accessibility references
   - **Parameters**: `element` (description), `ref` (accessibility reference), `doubleClick`, `button`, `modifiers`
   - **Usage**: `browser_click("Submit button", "ref_123")` - always prefer over CSS selectors

6. **`browser_type`** - Type text into inputs
   - **Purpose**: Text input with optional slow typing simulation
   - **Parameters**: `element`, `ref`, `text`, `submit`, `slowly`
   - **Usage**: `browser_type("Email field", "ref_456", "user@test.com", false, true)` for slow typing

7. **`browser_fill_form`** - Fill multiple form fields
   - **Purpose**: Batch form field population
   - **Parameters**: `fields` (array of field objects)
   - **Usage**: Single operation for complex forms instead of multiple `browser_type` calls

8. **`browser_select_option`** - Select dropdown options
   - **Purpose**: Dropdown and select element interaction
   - **Parameters**: `element`, `ref`, `values` (array)
   - **Usage**: `browser_select_option("Country dropdown", "ref_789", ["United States"])`

9. **`browser_hover`** - Mouse hover
   - **Purpose**: Hover interactions for tooltips, menus
   - **Parameters**: `element`, `ref`
   - **Usage**: Reveal hidden elements or trigger hover effects

10. **`browser_drag`** - Drag and drop
    - **Purpose**: Drag operations between elements
    - **Parameters**: `startElement`, `startRef`, `endElement`, `endRef`
    - **Usage**: File uploads, sortable lists, drag-and-drop interfaces

#### Input & Keyboard
11. **`browser_press_key`** - Keyboard input
    - **Purpose**: Special key presses (Enter, Tab, Arrow keys)
    - **Parameters**: `key` (string)
    - **Usage**: `browser_press_key("Enter")` for form submission

12. **`browser_file_upload`** - File uploads
    - **Purpose**: Handle file input elements
    - **Parameters**: `paths` (array of file paths)
    - **Usage**: `browser_file_upload(["/path/to/file.jpg"])` for upload testing

#### JavaScript & Evaluation
13. **`browser_evaluate`** - Execute JavaScript
    - **Purpose**: Run custom JavaScript in browser context
    - **Parameters**: `function` (JS code), `element`, `ref` (optional)
    - **Usage**: `browser_evaluate("return document.title")` for dynamic data extraction

#### Dialogs & Alerts
14. **`browser_handle_dialog`** - Handle browser dialogs
    - **Purpose**: Accept/dismiss alerts, confirms, prompts
    - **Parameters**: `accept` (boolean), `promptText` (optional)
    - **Usage**: `browser_handle_dialog(true)` to accept alerts

#### Waiting & Synchronization
15. **`browser_wait_for`** - Wait for conditions
    - **Purpose**: Wait for text appearance/disappearance or time delays
    - **Parameters**: `time`, `text`, `textGone`
    - **Usage**: `browser_wait_for(5, "Loading complete")` for synchronization

### Information Gathering Tools (4 Tools)

16. **`browser_snapshot`** - Accessibility snapshot
    - **Purpose**: Capture structured page accessibility tree (PRIMARY method)
    - **Parameters**: None
    - **Usage**: Always call first to get element references for other operations
    - **Key**: Provides `ref` values needed for all element interactions

17. **`browser_take_screenshot`** - Visual screenshots
    - **Purpose**: Visual page/element capture
    - **Parameters**: `type`, `filename`, `element`, `ref`, `fullPage`
    - **Usage**: `browser_take_screenshot("png", "debug.png", null, null, true)` for full page

18. **`browser_console_messages`** - Get console logs
    - **Purpose**: Retrieve browser console output
    - **Parameters**: None
    - **Usage**: Debug JavaScript errors and warnings

19. **`browser_network_requests`** - Network inspection
    - **Purpose**: View network requests and responses
    - **Parameters**: None
    - **Usage**: API call verification and debugging

### Tab Management (1 Tool)

20. **`browser_tabs`** - Tab operations
    - **Purpose**: List, create, close, switch browser tabs
    - **Parameters**: `action`, `index` (optional)
    - **Usage**: `browser_tabs("list")` to see open tabs, `browser_tabs("switch", 1)` to switch

### Browser Installation (1 Tool)

21. **`browser_install`** - Install browsers
    - **Purpose**: Automatic browser binary installation
    - **Parameters**: None
    - **Usage**: Call when getting "browser not installed" errors

### Advanced Tools (9 Tools - Opt-in Capabilities)

#### Vision-Based Interactions (3 Tools)
22. **`browser_mouse_click_xy`** - Coordinate clicking
    - **Purpose**: Click at specific coordinates (requires `--caps=vision`)
    - **Parameters**: `element`, `x`, `y`

23. **`browser_mouse_move_xy`** - Mouse movement
    - **Purpose**: Move mouse to coordinates (requires `--caps=vision`)
    - **Parameters**: `element`, `x`, `y`

24. **`browser_mouse_drag_xy`** - Coordinate dragging
    - **Purpose**: Drag from coordinate to coordinate (requires `--caps=vision`)
    - **Parameters**: `element`, `startX`, `startY`, `endX`, `endY`

#### PDF Generation (1 Tool)
25. **`browser_pdf_save`** - Save as PDF
    - **Purpose**: Export page as PDF (requires `--caps=pdf`)
    - **Parameters**: `filename`

#### Verification Tools (4 Tools - requires `--caps=verify`)
26. **`browser_verify_element_visible`** - Element visibility
    - **Purpose**: Verify element presence using accessibility attributes
    - **Parameters**: `role`, `accessibleName`

27. **`browser_verify_text_visible`** - Text visibility
    - **Purpose**: Verify text content is visible
    - **Parameters**: `text`

28. **`browser_verify_list_visible`** - List verification
    - **Purpose**: Verify list elements are present
    - **Parameters**: `element`, `ref`, `items`

29. **`browser_verify_value`** - Value verification
    - **Purpose**: Verify form element values
    - **Parameters**: `type`, `element`, `ref`, `value`

#### Tracing Tools (2 Tools - requires `--caps=tracing`)
30. **`browser_start_tracing`** - Start performance tracing
    - **Purpose**: Begin recording performance traces

31. **`browser_stop_tracing`** - Stop performance tracing
    - **Purpose**: End recording and save trace data

## Correct AI Agent Workflow

### Standard Interaction Pattern
1. **Navigate**: `browser_navigate("http://localhost:5173")`
2. **Snapshot**: `browser_snapshot()` - Always get accessibility tree first
3. **Analyze**: AI examines snapshot to identify target elements
4. **Interact**: Use element `ref` values for precise interactions
5. **Verify**: Use verification tools or `browser_evaluate()` for confirmation
6. **Debug**: Use console/network tools if issues arise

### Local Development Specifics
- **Hot Reload**: Changes appear immediately - no need to restart
- **Localhost URLs**: Always use `http://localhost:5173` for development
- **Live Debugging**: Use `browser_console_messages()` and `browser_network_requests()` for real-time debugging
- **Accessibility First**: Rely on `browser_snapshot()` for element discovery, not visual inspection

## Best Practices for MCP Usage

### Element Discovery (Critical)
```javascript
// WRONG - Don't use CSS selectors
browser_click("#submit-button")

// CORRECT - Use accessibility references
const snapshot = browser_snapshot()
// AI analyzes snapshot, finds: "- button \"Submit\" ref_123"
browser_click("Submit button", "ref_123")
```

### Form Handling
```javascript
// Batch form filling is preferred
browser_fill_form([
  { element: "Name field", ref: "ref_1", value: "John Doe" },
  { element: "Email field", ref: "ref_2", value: "john@example.com" }
])
```

### Verification Patterns
```javascript
// Use verification tools for assertions
browser_verify_text_visible("Registration successful")
browser_verify_element_visible("button", "Logout")
```

## Common Mistakes to Avoid

### Architecture Misunderstandings
- **Don't generate code**: MCP doesn't create `.spec.ts` files
- **Don't use CSS selectors**: Always use accessibility refs from snapshots
- **Don't assume screenshots**: Use `browser_snapshot()` for element discovery

### Workflow Errors
- **Don't interact without snapshot**: Always call `browser_snapshot()` first
- **Don't use coordinates by default**: Only with `--caps=vision` enabled
- **Don't forget verification**: Use verification tools for assertions

## Troubleshooting Guide

### Connection Issues
- **Server not found**: Ensure MCP server is running with correct port
- **Tool not available**: Check if capability is enabled (e.g., `--caps=vision`)

### Element Interaction Failures
- **"Element not found"**: Call `browser_snapshot()` again - DOM may have changed
- **Wrong element clicked**: Verify `ref` values from latest snapshot
- **Timing issues**: Use `browser_wait_for()` before interactions

### Local Development Specific
- **Changes not visible**: Ensure Vite dev server is running on port 5173
- **Hot reload not working**: Check browser console for errors
- **Network requests failing**: Use `browser_network_requests()` to debug

## Integration with Development Workflow

### Development Testing
1. Start Vite dev server: `npm run dev`
2. Launch MCP server: `npx @playwright/mcp@latest --port 8931`
3. AI agents can now navigate `http://localhost:5173` and see live changes

### CI/CD Integration
- Use headless mode: `--headless true`
- Set appropriate timeouts: `--timeout-action 10000`
- Enable only needed capabilities to reduce overhead

### Debugging Workflow
1. Navigate to problematic page
2. Take snapshot to see current state
3. Check console messages for errors
4. Inspect network requests for failed API calls
5. Use verification tools to confirm expected state

## Performance Considerations

### Efficiency Tips
- Call `browser_snapshot()` strategically - don't spam it
- Use batch operations like `browser_fill_form()` when possible
- Enable only necessary capabilities (`--caps`) to reduce overhead
- Use `browser_wait_for()` instead of arbitrary delays

### Resource Management
- Close browsers when done: `browser_close()`
- Use appropriate timeouts to avoid hanging
- Monitor console for performance warnings

This rule provides the accurate foundation for Playwright MCP usage, correcting the fundamental misconceptions in the original rule file and enabling proper real-time browser automation capabilities.